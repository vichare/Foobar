(define (lp) (load "E:/program/GitHub/Foobar/scheme/eval.ss"))

(define (self-evaluating? exp) ())
(define (variable? exp) ())
(define (quoted? exp) ())
(define (assignment? exp) ())
(define (definition? exp) ())
(define (if? exp) ())
(define (lambda? exp) ())
(define (begin? exp) ())
(define (cond? exp) ())
(define (application? exp) ())
(define (lookup-variable-value exp env) ())
(define (text-of-quotation exp) ())
(define (eval-assignment exp env) ())
(define (eval-definition exp env) ())
(define (eval-if exp env) ())
(define (make-procedure x1 x2 env) ())
(define (lambda-parameters exp) ())
(define (lambda-body exp) ())
(define (eval-sequence exp env) ())
(define (begin-actions exp) ())
(define (cond->if exp) ())
(define (apply f p) ())
(define (operator exp) ())
(define (list-of-values op env) ())


(define (eval exp env)
  (cond
    ((self-evaluating? exp) exp)
    ((variable? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) (eval-definition exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp)
      (make-procedure (lambda-parameters exp)
                      (lambda-body exp)
                      env
      )
    )
    ((begin? exp)
      (eval-sequence (begin-actions exp) env)
    )
    ((cond? exp) (eval (cond->if exp) env))
    ((application? exp)
      (apply 
        (eval (operator exp) env)
        (list-of-values (operands exp) env)
      )
    )
  )
)

(eval '() init-env)

