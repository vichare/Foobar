(define (make-queue)
  (let ((front-ptr `())
        (rear-ptr `()))
    (define (display-node node) 
      (cond 
        ((not (null? node))
          (display " ")
          (display (car node))
          (display-node (cdr node))
        )
      )
    )
    (define (display-queue) 
      (display "(queue")
      (display-node front-ptr)
      (display ")")
      (newline)
    )
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
        `()
        (car front-ptr)
      )
    )
    (define (insert-queue! item) 
      (define node (cons item `()))
      (cond
        ((empty-queue?)
          (set! front-ptr node)
          (set! rear-ptr node)
          dispatch
        )
        (else
          (set-cdr! rear-ptr node)
          (set! rear-ptr node)
          dispatch
        )
      )
    )
    (define (delete-queue!)
      (cond
        ((empty-queue?) dispatch)
        (else (set! front-ptr (cdr front-ptr))
              dispatch
        )
      )
    )
    (define (dispatch m)
      (cond 
        ((eq? m `display-queue) display-queue)
        ((eq? m `empty-queue?) empty-queue?)
        ((eq? m `insert-queue!) insert-queue!)
        ((eq? m `delete-queue!) delete-queue!)
        ((eq? m `front-queue) front-queue)
        (else `())
      )
    )
    dispatch
  )
)

(define q (make-queue))
((q `display-queue))
((((q `insert-queue!) `a) `display-queue))
((((q `insert-queue!) `b) `display-queue))
((((q `delete-queue!)) `display-queue))
((((q `insert-queue!) `c) `display-queue))
((((q `insert-queue!) `d) `display-queue))
((((q `delete-queue!)) `display-queue))
(define q2 (make-queue))
(display ((q `front-queue)))
(newline)
(display ((q2 `front-queue)))
(newline)
