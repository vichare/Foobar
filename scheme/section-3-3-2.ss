(define (make-queue) (cons `() `()))
(define (display-node node) 
  (cond 
    ((not (null? node))
      (display " ")
      (display (car node))
      (display-node (cdr node))
    )
  )
)
(define (display-queue q) 
  (cond (#t
     (display "(queue")
     (display-node (car q))
     (display ")")
     (newline)
  ))
)
(define (empty-queue? q) (null? (car q)))
(define (front-queue q)
  (if (empty-queue? q)
    `()
    (car (car q))
  )
)
(define (insert-queue! q item) 
  (define node (cons item `()))
    (cond
      ((empty-queue? q)
        (set-car! q node) 
        (set-cdr! q node)
        q
      )
      (else
        (set-cdr! (cdr q) node)
        (set-cdr! q node)
        q
      )
    )
)
(define (delete-queue! q)
  (if (empty-queue? q)
    q
    (cond (#t
      (set-car! q (cdr (car q)))
      q
    ))
  )
)

(define q (make-queue))
(display-queue q)
(display-queue (insert-queue! q `a))
(display-queue (insert-queue! q `b))
(display-queue (delete-queue! q))
(display-queue (insert-queue! q `c))
(display-queue (insert-queue! q `d))
(display-queue (delete-queue! q))
(define q2 (make-queue))
(display (front-queue q))
(newline)
(display (front-queue q2))
(newline)

